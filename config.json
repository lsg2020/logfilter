{
  "address": "127.0.0.1",
  "port": 9900,
  "reload_seconds": 60,
  "admin_user": "admin",
  "admin_pwd": "123456",
  "targets": [
    {
      "id": "test",
      "open": true,

      "filters": ["ERROR"],
      "files": [
        {
          "name": "file11",
          "path": "/root/11.txt",
          "ssh_host": "127.0.0.1",
          "ssh_port": 22,
          "ssh_user": "root",
          "ssh_pwd": "123456"
        }
      ]
    }
  ],
  "filters": [
    {
      "id": "ERROR",
      "entry_func": "script.Entry",
      "script": "package script\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"regexp\"\n\t\"sort\"\n\t\"strings\"\n\n\t\"logfilter\"\n)\n\n//=============================== event ================================================\n// ERROR test event {\"req_type\": \"event1\"}\nvar vModuleEventType = regexp.MustCompile(`\"req_type\": \"([^\"]*)\"`)\nvar vModuleEventTotal = make(map[string]int)\n\nfunc ModuleEvent(str string) (ok bool, summary string, ignore bool, err error) {\n\tif strings.Contains(str, \"test event\") {\n\t\tRecordAmount++\n\t\tok = true\n\t\tsummary = findString(vModuleEventType, str)\n\t\tvModuleEventTotal[summary]++\n\t\treturn\n\t}\n\treturn\n}\n\nfunc ModuleEventSummary() string {\n\treturn debugNameAmount(vModuleEventTotal)\n}\n\n//=============================== base ================================================\n\nvar RecordAmount = 0\nvar RecordModule string\n\nfunc CheckBase(str string) (ok bool, summary string, ignore bool, err error) {\n\tif !strings.Contains(str, \"ERROR\") {\n\t\treturn\n\t}\n\n\tok = true\n\tRecordAmount = 0\n\tRecordModule = findString(vCheckUnknownCallModule, str)\n\treturn\n}\n\nvar vCheckUnknownServiceTotal = make(map[string]int)\nvar vCheckUnknownCallModule = regexp.MustCompile(`\"module\": \"([^\"]*)\"`)\n\nfunc CheckUnknown(str string) (ok bool, summary string, ignore bool, err error) {\n\tif RecordAmount == 0 {\n\t\tsummary = RecordModule\n\t\tvCheckUnknownServiceTotal[summary]++\n\t\tok = true\n\t\treturn\n\t}\n\treturn\n}\n\nfunc CheckUnknownSummary() string {\n\treturn debugNameAmount(vCheckUnknownServiceTotal)\n}\n\n//=============================== help ================================================\n\nfunc findString(r *regexp.Regexp, str string) string {\n\tresult := r.FindStringSubmatch(str)\n\tif len(result) != 2 {\n\t\treturn \"\"\n\t}\n\treturn result[1]\n}\n\ntype NameAmountInfo struct {\n\tName   string\n\tAmount int\n}\n\nfunc debugNameAmount(data map[string]int) string {\n\tlist := make([]NameAmountInfo, 0)\n\tfor k, v := range data {\n\t\tlist = append(list, NameAmountInfo{Name: k, Amount: v})\n\t}\n\tsort.Slice(list, func(i, j int) bool { return list[i].Amount > list[j].Amount })\n\tbuff, err := json.Marshal(list)\n\tif err != nil {\n\t\treturn err.Error()\n\t}\n\tif len(buff) > 1024 {\n\t\treturn string(buff[:1024]) + \"...\"\n\t}\n\treturn string(buff)\n}\n\ntype FilterInfo struct {\n\tName    string\n\tAmount  int\n\tFunc    func(str string) (ok bool, summary string, ignore bool, err error)\n\tSummary func() string\n\n\tFiles    []string\n\tLines    []string\n\tSummarys []string\n\n\tTotalAmount  int\n\tIgnoreAmount int\n\tPrintAmount  int\n}\n\nfunc (f *FilterInfo) log(file string, str string) {\n\tok, summary, ignore, _ := f.Func(str)\n\tif !ok {\n\t\treturn\n\t}\n\n\tf.TotalAmount++\n\tif ignore {\n\t\tf.IgnoreAmount++\n\t\treturn\n\t}\n\tf.PrintAmount++\n\n\tf.Files = append(f.Files, file)\n\tf.Lines = append(f.Lines, str)\n\tf.Summarys = append(f.Summarys, summary)\n\n\tl := len(f.Files)\n\tif l > f.Amount {\n\t\tf.Files = f.Files[l-f.Amount:]\n\t\tf.Lines = f.Lines[l-f.Amount:]\n\t\tf.Summarys = f.Summarys[l-f.Amount:]\n\t}\n}\n\ntype FilterList []*FilterInfo\n\nfunc (fs FilterList) getFilter(name string) *FilterInfo {\n\tfor _, f := range fs {\n\t\tif f.Name == name {\n\t\t\treturn f\n\t\t}\n\t}\n\treturn nil\n}\n\nvar filters = FilterList{\n\t{\n\t\tName:    \"event\",\n\t\tAmount:  100,\n\t\tFunc:    ModuleEvent,\n\t\tSummary: ModuleEventSummary,\n\t},\n\t{\n\t\tName:    \"unknown\",\n\t\tAmount:  100,\n\t\tFunc:    CheckUnknown,\n\t\tSummary: CheckUnknownSummary,\n\t},\n}\n\nfunc Entry(param *logfilter.ScriptParam) {\n\tif param.Type == \"log\" {\n\t\tok, _, _, _ := CheckBase(param.ReqLogStr)\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\t\tfor _, f := range filters {\n\t\t\tf.log(param.ReqLogFile, param.ReqLogStr)\n\t\t}\n\t}\n\tif param.Type == \"filters\" {\n\t\tfor _, f := range filters {\n\t\t\tparam.ResFilters = append(param.ResFilters, f.Name)\n\t\t}\n\t}\n\tif param.Type == \"records\" {\n\t\tf := filters.getFilter(param.ReqRecordsFilter)\n\t\tif f == nil {\n\t\t\treturn\n\t\t}\n\t\tparam.ResRecordsSummary = append(param.ResRecordsSummary, fmt.Sprintf(\"total:%d ignore:%d print:%d\", f.TotalAmount, f.IgnoreAmount, f.PrintAmount))\n\t\tif f.Summary != nil {\n\t\t\tparam.ResRecordsLogs = append(param.ResRecordsLogs, f.Summary())\n\t\t} else {\n\t\t\tparam.ResRecordsLogs = append(param.ResRecordsLogs, \"\")\n\t\t}\n\t\tfor i := len(f.Summarys) - 1; i >= 0; i-- {\n\t\t\tparam.ResRecordsSummary = append(param.ResRecordsSummary, f.Summarys[i])\n\t\t\tparam.ResRecordsLogs = append(param.ResRecordsLogs, f.Lines[i])\n\t\t}\n\t}\n}\n"
    }
  ]
}